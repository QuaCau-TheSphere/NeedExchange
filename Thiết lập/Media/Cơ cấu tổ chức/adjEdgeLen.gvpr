//
//  increase edge .len to (approximately) node-boundary to node=boundary
//
BEGIN{
  node_t n, newH, newT;
  edge_t newE;
  graph_t newRoot;
  double x[], y[], d01, d12, d23, tot, Nope=-99999999.;
  int i, j, l, cnt;
  string POS, st, tok[int];

  double distance(double x1,double y1,double x2,double y2){
    double d;
    d=sqrt((x1-x2)*(x1-x2) + (y1-y2)*(y1-y2));
    return d/72.;  // convert points to inches !!
  }
}
E{
  POS=$.pos;
  if (hasAttr($,"len") && $.len!=""){
    print("// edge: ", $.name, "   ", POS, "  ", $.len);
    // get pos values for tail & head
    x[0]=$.tail.X;
    y[0]=$.tail.Y;
    x[3]=$.head.X;
    y[3]=$.head.Y;
    x[1]=Nope;
    y[1]=Nope;
    x[2]=Nope;
    y[2]=Nope;

    // newer versions of GVPR have bug in tokens command
    // seperator chars are not removed, ouch
    // ALSO,
    // funky chars concatenated with tok values (>>e,150.25,251.060??????<<)
    // so, explicitly remove them
    //cnt=tokens(POS, tok, "\t\n\r ");

    
    cnt=split(POS, tok, "\t\n\r ");
    print ("//  cnt & start ",cnt);
    for (i=0;i<cnt;i++){
      print("// ",i,"   >",tok[i],"<");
      //st=sub(tok[i],"[	 ]"); // remove tabs and spaces !!
      // strip trailing space
      l=length(tok[i]);
      //print("// length (tok) : ",l);
      //while (substr(tok[i],--l,1)==" ") dummy="";  // bogus
      for (j=0;(j<l&&(substr(tok[i],j,1)!=" "));j++) dummy="";  // bogus
      st=substr(tok[i],0,j);
      print ("// st   ++",st,"++");
      if ((st=="s*") || ((st=="[0-9]*") && (x[1]==Nope))){  // tail
	if (st=="s*"){
	  st=substr(st,2);
	  print ("//  did substr  ", st);
        }
        print ("// st   >>",st,"<<");
	x[1]=xOf(st);
	y[1]=yOf(st);
        print("// set tail X/Y of ",st, "  to ", x[1],"/",y[1]);
      }
      if ((st=="e*") || ((i==cnt-1) && (x[2]==Nope))){
	if (st=="e*") st=substr(st,2);
	x[2]=xOf(st);
	y[2]=yOf(st);
        print("// set head X/Y to ", x[2],"/",y[2]);
      }
    }
    for (i=0;i<=3;i++)   print("//  point ", i, "  X/Y  ", x[i],"/",y[i]);
    // ok, we have the 4 points
    d01=distance(x[0], y[0], x[1], y[1]);
    d12=distance(x[1], y[1], x[2], y[2]);
    d23=distance(x[2], y[2], x[3], y[3]);
    tot=(d01+d12+d23); 
    print("//  distances: ", d01, "  ",d12,"  ",d23, "   total: ", tot);
    $._oldLen=$.len;
    $.len=(string)$.len+(d01+d23);
  }
}